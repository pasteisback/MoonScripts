print("Deep Vulnerability Test made by SprayingCactus (RamingCactus)")
print("✅: Safe. ❌: Detected.")
print("\n")

local LogService = game:GetService("LogService")

local function logResult(test, result, severity)
	if result == false then
		print("✅ "..test)
	else
		print("❌ "..test)
	end
	return result and severity or 0
end

local totalTests = 0
local riskScore = 0
local totalDetections = 0

local detectionModules = {
	["Global Function Exposure"] = function()
		local riskyFuncs = {
			"getgenv", "hookfunction", "setreadonly", "newcclosure", "islclosure",
			"getreg", "getgc", "debug.getinfo", "debug.setupvalue", "debug.getupvalue"
		}
		for _, func in ipairs(riskyFuncs) do
			if _G[func] or getfenv()[func] then
				return true
			end
		end
		return false
	end,

	["Anti-Cheat Hooking"] = function()
		return pcall(function()
			return not islclosure(print)
		end)
	end,

	["Remote Event Integrity"] = function()
		return pcall(function()
			local remote = Instance.new("RemoteEvent")
			remote:FireServer()
			return true
		end)
	end,

	["Memory Tampering"] = function()
		return pcall(function()
			local testTable = { Safe = true }
			setreadonly(testTable, false)
			testTable.Safe = false
			return testTable.Safe ~= false
		end)
	end,

	["Environment Spoofing"] = function()
		return pcall(function()
			return type(getgenv) == "function" and getgenv() ~= _G
		end)
	end,

	["Debug Library Integrity"] = function()
		return pcall(function()
			return debug and debug.getinfo and debug.getinfo(print) ~= nil
		end)
	end,

	["Function Detouring"] = function()
		local oldPrint = print
		local newFunc = function(...) oldPrint(...) end
		return oldPrint ~= newFunc
	end,

	["Syscall Manipulation"] = function()
		return pcall(function()
			local testFunc = function() return end
			local sysTest = string.dump(testFunc)
			return sysTest:find("SYSCALL")
		end)
	end,

	["Hidden Debugging Traces"] = function()
		return pcall(function()
			local trace = debug.traceback()
			return trace and #trace > 200
		end)
	end,

	["Log Service Tampering"] = function()
		return pcall(function()
			return LogService and LogService:GetLogHistory() ~= nil
		end)
	end
}

for name, testFunction in pairs(detectionModules) do
	totalTests = totalTests + 1
	local detected = testFunction()
	if detected then
		totalDetections = totalDetections + 1
	end
	riskScore = riskScore + logResult(name, detected, 10)
end

local detectionRate = (totalDetections / totalTests) * 100
local safetyPercentage = math.max(0, math.min(100, 100 - detectionRate))

local status = "❓ UNKNOWN"
if detectionRate >= 80 then
	status = "🔴 DTC (Detected) - Highly Unsafe!"
elseif detectionRate >= 40 then
	status = "🟠 Semi-UD (Semi-Undetected) - Some Risks."
else
	status = "🟢 UD (Undetected) - Fully Secure!"
end

local plrexec
if identifyexecutor then
	plrexec = identifyexecutor()
else
	plrexec = "Your exploit"
end

print("\n")
print("Real Vulnerability Test:")
print(plrexec .. " has received a percentage of " .. math.floor(safetyPercentage) .. "%")
print(plrexec.."is "..status)

if detectionRate >= 80 then
	function Callback(answer)
		if answer == "Yes" then
			print("\n")
			print("Applying changes for current security issues.")

			local function secureEnvironment()
				getgenv = nil
				getfenv = nil
				debug = nil
				getreg = nil
				getgc = nil
			end
			secureEnvironment()

			setreadonly = function() end
			hookfunction = function() end
			newcclosure = function(func) return func end

			local function blockHooks()
				local oldPrint = print
				print = function(...)
					oldPrint(...)
				end
			end
			blockHooks()

			local function secureRemotes()
				local remote = Instance.new("RemoteEvent")
				remote.OnServerEvent:Connect(function() return end)
			end
			secureRemotes()

			riskScore = riskScore / 2
			safetyPercentage = math.max(0, math.min(100, 100 - ((totalDetections / totalTests) * 100)))

			print("\n")
			print("Applied patches for security issues!")
			print("\n")
			print("New Results:")
			print(plrexec .. " has received a new percentage of " .. math.floor(safetyPercentage) .. "%")
			print(plrexec.." is now "..(safetyPercentage > 90 and "🟢 UD" or "🟠 Semi-UD"))
		else
		end
	end

	local Bindable = Instance.new("BindableFunction")
	Bindable.OnInvoke = Callback

	game.StarterGui:SetCore("SendNotification", {
		Title = "Deep Vulnerability Test";
		Text = plrexec.." is DTC. Fix some security issues?";
		Duration = math.huge;
		Button1 = "Yes";
		Button2 = "No";
		Callback = Bindable;
	})
end
